<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.github.chrisruffalo</groupId>
  <artifactId>pincushion</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>pincushion</name>
  <description>an application for handling network tunneling with a focus on ease of configuration and administration</description>
  
  	<properties>
		<!-- source output version -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- descriptive properties -->
		<application.title>Pincushion</application.title>
		
		<!-- target language version -->
		<pincushion.java.version>1.7</pincushion.java.version>
		
		<!-- versions -->
		<logback.version>1.1.1</logback.version>
		<guava.version>15.0-rc1</guava.version>
		<junit.version>4.11</junit.version>
		<resteasy.version>3.0.8.Final</resteasy.version>
		
		<!-- using alpha for better channel adapters and for executors -->
		<netty.version>5.0.0.Alpha1</netty.version>
		
		<!-- jetty -->
		<jetty.version>9.1.3.v20140225</jetty.version>
	</properties>
	
	<dependencies>
		<!-- logging impl -->
		<dependency>
		    <groupId>ch.qos.logback</groupId>
		    <artifactId>logback-classic</artifactId>
		    <version>${logback.version}</version>
		</dependency>
		
		<!-- direct nio network handling -->
		<dependency>
		    <groupId>io.netty</groupId>
		    <artifactId>netty-all</artifactId>
		    <version>${netty.version}</version>
		</dependency>
	
		<!-- undertow -->
		<dependency>
		    <groupId>io.undertow</groupId>
		    <artifactId>undertow-servlet</artifactId>
		    <version>1.0.9.Final</version>
		</dependency>
		
				
		<!-- resteasy services on jetty -->
		<dependency>
		    <groupId>org.jboss.resteasy</groupId>
		    <artifactId>resteasy-jaxb-provider</artifactId>
		    <version>${resteasy.version}</version>
		    <exclusions>
		    	<exclusion>
		    		<artifactId>istack-commons-runtime</artifactId>
		    		<groupId>com.sun.istack</groupId>
		    	</exclusion>
		    </exclusions>
		</dependency>
		<dependency>
		    <groupId>org.jboss.resteasy</groupId>
		    <artifactId>resteasy-jaxrs</artifactId>
		    <version>${resteasy.version}</version>
		    <exclusions>
		    	<exclusion>
		    		<artifactId>javassist</artifactId>
		    		<groupId>javassist</groupId>
		    	</exclusion>
		    	<exclusion>
		    		<artifactId>jboss-annotations-api_1.1_spec</artifactId>
		    		<groupId>org.jboss.spec.javax.annotation</groupId>
		    	</exclusion>
		    </exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson-provider</artifactId>
			<version>${resteasy.version}</version>
		</dependency>
		
		<!-- command line configuration -->
		<dependency>
		  <groupId>com.beust</groupId>
		  <artifactId>jcommander</artifactId>
		  <version>1.30</version>
		</dependency>
		
		<!-- embedded database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.175</version>
		</dependency>
		
		<!-- orm -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.3.4.Final</version>
		</dependency>
		
		<!-- building java modules -->
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-embedder</artifactId>
			<version>3.2.1</version>
		</dependency>
		
		<!-- running python modules -->
		<dependency>
			<groupId>org.python</groupId>
			<artifactId>jython-standalone</artifactId>
			<version>2.7-b1</version>
		</dependency>            
		
		<!-- testing/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.html</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<excludes>
					<exclude>**/*.properties</exclude>
					<exclude>**/*.html</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>			
		</resources>

		<plugins>
			<!-- execute test coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.6.3.201306030806</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
			<!-- compile less to css -->
			<plugin>
			    <groupId>org.lesscss</groupId>
			    <artifactId>lesscss-maven-plugin</artifactId>
			    <version>1.3.3</version>
			    <configuration>
			        <sourceDirectory>${project.basedir}/src/main/resources/less</sourceDirectory>
			        <!-- compiles bootstrap and app less into css and saves it, will need to delete to re-build -->
			        <outputDirectory>${project.basedir}/src/main/resources/web/app/css</outputDirectory>
			        <compress>true</compress>
			        <lessJs>${project.basedir}/src/main/resources/less/thirdparty/js/less-1.7.0.js</lessJs>
			        <includes>
			            <include>main.less</include>
			        </includes>
			    </configuration>
			    <executions>
			        <execution>
			            <goals>
			                <goal>compile</goal>
			            </goals>
			        </execution>
			    </executions>
			</plugin>
			
			<!-- gzip individual files -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
			  	<version>1.7</version>
			  	<executions>
			    	<execution>
			      		<phase>process-resources</phase>
			      		<configuration>
			        		<target>
			        			<!-- gzip main index file -->
								<gzip src="${project.build.directory}/classes/web/index.html" destfile="${project.build.directory}/classes/web/index.html.gz"/>
								
								<!-- gzip template html files -->
								<gzip src="${project.build.directory}/classes/web/templates/module_add.html" destfile="${project.build.directory}/classes/web/templates/module_add.html.gz"/>
								<gzip src="${project.build.directory}/classes/web/templates/module_details.html" destfile="${project.build.directory}/classes/web/templates/module_details.html.gz"/>
								<gzip src="${project.build.directory}/classes/web/templates/modules.html" destfile="${project.build.directory}/classes/web/templates/modules.html.gz"/>
								<gzip src="${project.build.directory}/classes/web/templates/tunnel_form.html" destfile="${project.build.directory}/classes/web/templates/tunnel_form.html.gz"/>
								<gzip src="${project.build.directory}/classes/web/templates/tunnels.html" destfile="${project.build.directory}/classes/web/templates/tunnels.html.gz"/>
								
								<!-- gzip font files -->
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.eot" destfile="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.eot.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.svg" destfile="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.svg.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.ttf" destfile="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.ttf.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.woff" destfile="${project.build.directory}/classes/web/thirdparty/fonts/fontawesome-webfont.woff.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/FontAwesome.otf" destfile="${project.build.directory}/classes/web/thirdparty/fonts/FontAwesome.otf.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.eot" destfile="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.eot.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.svg" destfile="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.svg.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.ttf" destfile="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.ttf.gz"/>
								<gzip src="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.woff" destfile="${project.build.directory}/classes/web/thirdparty/fonts/glyphicons-halflings-regular.woff.gz"/>
			        		</target>
			      		</configuration>
			      		<goals>
			        		<goal>run</goal>
			      		</goals>
		    		</execution>
		  		</executions>
			</plugin>
			
			<!-- compress javascript resources -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
				  <execution>
				    <goals>
				      <goal>compress</goal>
				    </goals>
				  </execution>
				</executions>        
				<configuration>
					<jswarn>false</jswarn>
					<nomunge>true</nomunge>
			  		<nosuffix>true</nosuffix>
			  		<gzip>true</gzip>
		  			<aggregations>
		  				<!-- css aggregation -->
		  				<aggregation>
						    <!-- remove files after aggregation (default: false) -->
              				<removeIncluded>true</removeIncluded>						
							<!-- insert new line after each concatenation (default: false) -->
							<insertNewLine>true</insertNewLine>
							<!-- output to classes dir as pincushion.js (after all other js files are removed) -->
							<output>${project.build.directory}/classes/web/pincushion.css</output>
		  					<!-- files to include, path relative to output's directory or absolute path-->
		  					<includes>
		  						<!-- main css -->
		  						<include>app/css/main.css</include>
		  						<!-- css for third party libraries/styling -->
		  						<include>thirdparty/css/*.css</include>
		  					</includes>
		  				</aggregation>
		  			
		  				<!-- pincushion app javascript aggregation -->
						<aggregation>
						    <!-- remove files after aggregation (default: false) -->
              				<removeIncluded>true</removeIncluded>						
							<!-- insert new line after each concatenation (default: false) -->
							<insertNewLine>true</insertNewLine>
							<!-- output to classes dir as pincushion.js (after all other js files are removed) -->
							<output>${project.build.directory}/classes/web/pincushion.js</output>
							<!-- files to include, path relative to output's directory or absolute path-->
							<includes>
								<!-- load third-party dependencies -->
							 	<include>thirdparty/js/jquery-2.1.0.min.js</include>
							 	<include>thirdparty/js/bootstrap.min.js</include>
							 	<include>thirdparty/js/typeahead.bundle.min.js</include>
							 	<include>thirdparty/js/codemirror-json.min.js</include>
							
								<!-- load angular and angular modules -->
								<include>thirdparty/js/angular.min.js</include>
							 	<include>thirdparty/js/**/angular*.js</include>
							
								<!-- top level pincushion app should be loaded first -->
								<include>app/js/app.js</include>
								<!-- insure other top-level files are loaded -->
								<include>app/js/*.js</include>
								<!-- ensure dependencies loaded in order -->
								<include>app/js/util/*.js</include>
								<include>app/js/services/*.js</include>
								<include>app/js/controllers/*.js</include>
								
								<!-- catch-all -->
							 	<include>**/*.js</include>
							</includes>
			      		</aggregation>
			    	</aggregations>
			    	<!-- don't compress/minify/obfuscate anything, just aggregate and gzip -->
			    	<excludes>
			    		<exclude>**/less/*</exclude>
						<exclude>**/*.js</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- create single executable jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
              				<filters>
              					<filter>
              						<artifact>javax.annotation:jsr250-api</artifact>
              						<excludes>
              							<exclude>javax/annotation/**</exclude>
              						</excludes>
              					</filter>
								<filter>
									<artifact>org.python:jython-standalone</artifact>
								  	<excludes>
								    	<exclude>javax/xml/**</exclude>
								    	<exclude>com/google/**</exclude>
								    	<exclude>org/w3c/**</exclude>
								    	<exclude>org/xml/sax/**</exclude>
								    	<exclude>org/apache/xmlcommons/**</exclude>
								  	</excludes>
								</filter>
                			</filters>						
							<transformers>
								<!-- set main class -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.github.chrisruffalo.pincushion.Main</mainClass>
								</transformer>
								<!-- merge service files -->
    							<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>		
			
			<!-- run jasmine to test javascript resources -->
			<plugin>
				<groupId>com.github.searls</groupId>
				<artifactId>jasmine-maven-plugin</artifactId>
				<version>1.3.1.4</version>
				<executions>
					<!-- 
					<execution>
						<id>jasmine-test</id>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					-->
				</executions>
				<configuration>
					<!-- configuration -->
					<haltOnFailure>false</haltOnFailure>
				
					<!-- thirdparty sources -->
					<preloadSources>
						<!-- <source>${project.basedir}/src/main/resources/web/thirdparty/js/jquery-2.1.0.min.js</source> -->
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/bootstrap.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/codemirror-json.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/typeahead.bundle.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/jquery-2.1.0.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/angular.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/angular-resource.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/angular-route.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/angular-typeahead.min.js</source>
						<source>${project.basedir}/src/main/resources/web/thirdparty/js/angular-ui-codemirror.js</source>
					</preloadSources>

					<!-- application script -->
					<jsSrcDir>src/main/resources/web/js/**/*.js</jsSrcDir>
					
					<!-- test directory -->
					<jsTestSrcDir>src/test/resources/jasmine</jsTestSrcDir>
					
					<!-- load only Spec files -->
					<specIncludes>
						<include>*Spec.js</include>
					</specIncludes>
				</configuration>
				
				<dependencies>
					<dependency>
					    <groupId>net.sourceforge.htmlunit</groupId>
					    <artifactId>htmlunit</artifactId>
					    <version>2.14</version>
					</dependency>
				</dependencies>
			</plugin>
					
		</plugins>	
	
		<pluginManagement>
			<plugins>
				<!-- control compiler version -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>${pincushion.java.version}</source>
						<target>${pincushion.java.version}</target>
						<fork>true</fork>
					</configuration>
				</plugin>							
				
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jacoco</groupId>
										<artifactId>
											jacoco-maven-plugin
										</artifactId>
										<versionRange>
											[0.6.3.201306030806,)
										</versionRange>
										<goals>
											<goal>prepare-agent</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>net.alchim31.maven</groupId>
										<artifactId>yuicompressor-maven-plugin</artifactId>
										<versionRange>[1.4.0,)</versionRange>
										<goals>
											<goal>compress</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>